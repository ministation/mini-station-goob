using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared._CorvaxGoob.MedipenRefiller;
using Content.Shared.Chemistry;
using Content.Shared.Chemistry.Reagent;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;
using static Robust.Client.UserInterface.Controls.BoxContainer;

namespace Content.Client._CorvaxGoob.MedipenRefiller;

[GenerateTypedNameReferences]
public sealed partial class MedipenRefillerWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    private readonly SpriteSystem _sprite;

    private EntityUid _owner;

    private bool _appliedSettings = false;

    private string _previewPrototype = "FillableMedipen";
    private int _medipenMaxVolume = 0;
    private bool _medipenInserted = false;

    public void SetOwner(EntityUid owner)
    {
        _owner = owner;

        if (_entManager.TryGetComponent<MedipenRefillerComponent>(_owner, out var refillerComponent))
        {
            UpdateColor(refillerComponent.CurrentColor);

            ColorPicker.Color = refillerComponent.CurrentColor;
            LabelLineEdit.Text = refillerComponent.CurrentLabel;
            MedipenDosage.Text = refillerComponent.CurrentVolume.ToString();
        }
    }

    public int GetMaxVolume()
    {
        return _medipenMaxVolume;
    }

    public MedipenRefillerWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _sprite = _entManager.System<SpriteSystem>();

        if (_prototypeManager.HasIndex(_previewPrototype))
            MedipenPreview.SetEntity(_entManager.SpawnEntity(_previewPrototype, MapCoordinates.Nullspace));
        else
            MedipenPreview.SetEntity(_entManager.SpawnEntity("Error", MapCoordinates.Nullspace));

        ColorPicker.OnColorChanged += _ =>
        {
            ToggleApplyButton(true);
            UpdateColor(ColorPicker.Color);
        };

        LabelLineEdit.OnTextChanged += _ =>
        {
            ToggleApplyButton(true);
        };

        MedipenDosage.OnTextChanged += _ =>
        {
            if (_medipenInserted)
            {
                if (int.TryParse(MedipenDosage.Text, out var result))
                {
                    result = Math.Clamp(result, 0, _medipenMaxVolume);
                    MedipenDosage.Text = result.ToString();
                }
                else
                {
                    MedipenDosage.Text = _medipenMaxVolume.ToString();
                }

                ToggleApplyButton(true);
            }
        };

        ApplySettingsButton.OnButtonDown += _ =>
        {
            ToggleApplyButton(false);
        };
    }

    private void ToggleApplyButton(bool enabled)
    {
        _appliedSettings = enabled;

        UpdateAccess(!enabled);
    }

    public void UpdateState(MedipenRefillerBoundUserInterfaceState state)
    {
        var medipenInserted = state.MedipenContainerInfo is not null;
        var isNewMedipenInserted = _medipenInserted != medipenInserted;

        _medipenInserted = medipenInserted;
        _medipenMaxVolume = state.MedipenContainerInfo is not null ? state.MedipenContainerInfo.MaxVolume.Int() : 0;
        _previewPrototype = state.PreviewPrototype;

        if (state.InputContainerInfo is not null)
            FillMedipenButton.Disabled = !_medipenInserted || state.InputContainerInfo.CurrentVolume < 1;

        UpdateSolution(InputContainerInfo, state.InputContainerInfo);
        UpdateSolution(MedipenContainerInfo, state.MedipenContainerInfo, "medipen-refiller-window-no-medipen-contaner-loaded-text");

        UpdateMedipen();

        if (isNewMedipenInserted)
            UpdateAccess(false);
        else
            UpdateAccess(_appliedSettings);
    }
    private void UpdateAccess(bool locked)
    {
        MedipenDosage.Editable = _medipenInserted;

        if (!_medipenInserted)
            return;

        ApplySettingsButton.Disabled = locked;
    }
    private void UpdateMedipen()
    {
        MedipenNotInsertedText.Visible = !_medipenInserted;
        MedipenPreview.Visible = _medipenInserted;
        LabelLineEdit.Editable = _medipenInserted;
        ApplySettingsButton.Disabled = !_medipenInserted;

        if (_prototypeManager.HasIndex(_previewPrototype))
        {
            MedipenPreview.SetEntity(_entManager.SpawnEntity(_previewPrototype, MapCoordinates.Nullspace));
            UpdateColor(ColorPicker.Color);
        }
        else
            MedipenPreview.SetEntity(_entManager.SpawnEntity("Error", MapCoordinates.Nullspace));
    }

    private void UpdateColor(Color? color)
    {
        if (color is null)
            return;

        if (!_entManager.TryGetComponent<SpriteComponent>(MedipenPreview.Entity, out var sprite))
            return;

        if (_sprite.TryGetLayer((MedipenPreview.Entity.Value, sprite), MedipenColorLayer.Fill, out var layerFill, false))
            layerFill.Color = color.Value;

        if (_sprite.TryGetLayer((MedipenPreview.Entity.Value, sprite), MedipenColorLayer.Empty, out var layerEmpty, false))
            layerEmpty.Color = color.Value;
    }

    private void UpdateSolution(BoxContainer menu, ContainerInfo? info, string noContainerLoadedText = "medipen-refiller-window-no-container-loaded-text")
    {
        menu.Children.Clear();

        if (info is null)
        {
            menu.Children.Add(new Label
            {
                Text = Loc.GetString(noContainerLoadedText)
            });

            FillMedipenButton.Disabled = true;
            return;
        }

        menu.Children.Add(new BoxContainer
        {
            Orientation = LayoutOrientation.Horizontal,
            Children =
                {
                    new Label { Text = $"{info.DisplayName}: " },
                    new Label
                    {
                        Text = $"{info.CurrentVolume}/{info.MaxVolume}",
                        StyleClasses = { StyleNano.StyleClassLabelSecondaryColor }
                    }
                }
        });

        if (info.Reagents != null)
        {
            foreach (var reagent in info.Reagents)
            {
                _prototypeManager.TryIndex(reagent.Reagent.Prototype, out ReagentPrototype? proto);
                var name = proto?.LocalizedName ?? Loc.GetString("medipen-refiller-window-unknown-reagent-text");
                var reagentColor = proto?.SubstanceColor ?? default(Color);

                menu.Children.Add(new BoxContainer
                {
                    Orientation = LayoutOrientation.Horizontal,

                    Children =
                    {
                        new Label { Text = $"{name}: ", FontColorOverride = reagentColor },
                        new Label
                            {
                            Text = $"{reagent.Quantity}u",
                            StyleClasses = { StyleNano.StyleClassLabelSecondaryColor }
                        },
                    }
                });
            }
        }
    }
}
