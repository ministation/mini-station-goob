// SPDX-FileCopyrightText: 2021 Visne <39844191+Visne@users.noreply.github.com>
// SPDX-FileCopyrightText: 2021 metalgearsloth <comedian_vs_clown@hotmail.com>
// SPDX-FileCopyrightText: 2021 moonheart08 <moonheart08@users.noreply.github.com>
// SPDX-FileCopyrightText: 2022 Paul Ritter <ritter.paul1@googlemail.com>
// SPDX-FileCopyrightText: 2022 Rinkashikachi <15rinkashikachi15@gmail.com>
// SPDX-FileCopyrightText: 2022 mirrorcult <lunarautomaton6@gmail.com>
// SPDX-FileCopyrightText: 2022 wrexbe <81056464+wrexbe@users.noreply.github.com>
// SPDX-FileCopyrightText: 2023 Morb <14136326+Morb0@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 Aiden <28298836+Aidenkrz@users.noreply.github.com>
//
// SPDX-License-Identifier: MIT

using Content.Shared._CorvaxGoob.CCCVars;
using Content.Shared._CorvaxGoob.TTS;
using Content.Shared.Administration;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using System.Configuration;
using System.Linq;
using System.Xml.Linq;

namespace Content.Client.Administration.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class AdminAnnounceWindow : DefaultWindow
    {
        [Dependency] private readonly ILocalizationManager _localization = default!;
        [Dependency] private readonly IConfigurationManager _cfgManager = default!; // CorvaxGoob-TTS
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!; // CorvaxGoob-TTS

        private List<TTSVoicePrototype> _voiceList = new(); // CorvaxGoob-TTS

        public AdminAnnounceWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            Announcement.Placeholder = new Rope.Leaf(_localization.GetString("admin-announce-announcement-placeholder"));
            AnnounceMethod.AddItem(_localization.GetString("admin-announce-type-station"));
            AnnounceMethod.SetItemMetadata(0, AdminAnnounceType.Station);
            AnnounceMethod.AddItem(_localization.GetString("admin-announce-type-server"));
            AnnounceMethod.SetItemMetadata(1, AdminAnnounceType.Server);
            AnnounceMethod.OnItemSelected += AnnounceMethodOnOnItemSelected;
            Announcement.OnKeyBindUp += AnnouncementOnOnTextChanged;

            // CorvaxGoob-TTS-Start
            if (_cfgManager.GetCVar(CCCVars.TTSEnabled))
            {
                TTSContainer.Visible = true;
                InitializeVoice();
            }
            // CorvaxGoob-TTS-End
        }

        // CorvaxGoob-TTS-Start
        private void InitializeVoice()
        {
            _voiceList = _prototypeManager
                .EnumeratePrototypes<TTSVoicePrototype>()
                .OrderBy(o => Loc.GetString(o.Name))
            .ToList();

            VoiceButton.AddItem(Loc.GetString("tts-voice-none"));
            VoiceButton.SetItemMetadata(0, "None");

            for (var i = 1; i < _voiceList.Count; i++)
            {
                var name = Loc.GetString(_voiceList[i].Name);
                VoiceButton.AddItem(name);
                VoiceButton.SetItemMetadata(i, _voiceList[i].ID);
            }

            VoiceButton.OnItemSelected += args =>
            {
                VoiceButton.SelectId(args.Id);
            };
        }
        // CorvaxGoob-TTS-End

        private void AnnouncementOnOnTextChanged(GUIBoundKeyEventArgs args)
        {
            AnnounceButton.Disabled = Rope.Collapse(Announcement.TextRope).TrimStart() == "";
        }

        private void AnnounceMethodOnOnItemSelected(OptionButton.ItemSelectedEventArgs args)
        {
            AnnounceMethod.SelectId(args.Id);
            Announcer.Editable = ((AdminAnnounceType?)args.Button.SelectedMetadata ?? AdminAnnounceType.Station) == AdminAnnounceType.Station;
            TTSContainer.Visible = _cfgManager.GetCVar(CCCVars.TTSEnabled) && (((AdminAnnounceType?) args.Button.SelectedMetadata ?? AdminAnnounceType.Station) == AdminAnnounceType.Station); // CorvaxGoob-TTS
        }
    }
}
